package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"GoChat/api/graph/model"
	"GoChat/api/kafka"
	"context"
	"crypto/rand"
	"fmt"
	"math/big"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	rand, _ := rand.Int(rand.Reader, big.NewInt(100))
	user := &model.User{
		ID:       fmt.Sprintf("T%d", rand),
		Name:     input.Name,
		Password: input.Password,
	}
	r.users = append(r.users, user)
	return user, nil
}

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, input model.NewMessage) (*model.Message, error) {
	rand, _ := rand.Int(rand.Reader, big.NewInt(100))
	message := &model.Message{
		ID:     fmt.Sprintf("M%d", rand),
		Text:   input.Text,
		UserID: input.UserID,
	}

	r.messages = append(r.messages, message)

	kafka.MessageProducer(message.Text)

	msgs, nil := kafka.MessageConsumer()

	messageChan <- msgs

	return message, nil
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.User, error) {
	return r.users, nil
}

// GetUserID is the resolver for the getUserID field.
func (r *queryResolver) GetUserID(ctx context.Context, id string) (*model.User, error) {
	user, err := FindUserByID(r.users, id)
	if err != nil {
		return nil, err
	}

	return &model.User{
		Name: user.Name,
	}, nil
}

// GetMessages is the resolver for the getMessages field.
func (r *queryResolver) GetMessages(ctx context.Context) ([]*model.Message, error) {
	return r.messages, nil
}

// GetUserMessages is the resolver for the getUserMessages field.
func (r *queryResolver) GetUserMessages(ctx context.Context, userID string) ([]*model.Message, error) {
	messages, err := FindUserMessages(r.messages, userID)
	if err != nil {
		return nil, err
	}
	return messages, nil
}

// GetMessage is the resolver for the getMessage field.
func (r *queryResolver) GetMessage(ctx context.Context, id string) (*model.Message, error) {
	message, err := FindMessageByID(r.messages, id)
	if err != nil {
		return nil, err
	}
	return message, nil
}

// GetMessage is the resolver for the getMessage field.
func (r *subscriptionResolver) GetMessage(ctx context.Context) (<-chan []*model.Message, error) {

	return messageChan, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.users, nil
}
